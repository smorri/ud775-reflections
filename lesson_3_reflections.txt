When would you want to use a remote repository rather than keeping all your work local?
    It is more convenient to use a remote repository because it creates an easier access to your files, without the user using the same     machine. It is also more convenient when multiple users to access the repository from their own locations remotely, rather than in 1 setting using the same machines.
    
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	If we relied on automatic pulls, we may pull data from Github much too frequently. It is best to only pull changs when we actually need them (ie when we need to update some code, or when we need pull the latest version from the Github servers). 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Users can perform a branch from a commit. Once a branch is instantiated, the application takes a copy of the commit and all prev commits linked from the initial commit. Branches allow users to perform edits that do not directly affect the initial/commit and its subsequent paths.
	A clone generates a copy of the commits and logs of a repository.
	A fork is a Github exclusive feature that operates like a clone. But it clones repositorties from one Gitbug account to another. Forks still keep their reference to the original repository owner. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The last known state of a remote can help users detect merge conflicts. Suppose a user pulls the latest repo from Github. If the state of the repo, a commit OR the pointer to the last commit does not match that of the repo on the users machine, then there will be a conflict if a merge is performed because the state of both repos will be ahead or behind one another. Keeping a copy of the last state allows th euser to perform a diff and see differences between commits of both repos, and make the necessary changes such that the states match when the merge is completed.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Files could be submitted back and forth to one or more users via Email. But this can be very time consuming, and inconvenient because it comes with a lot of overhead. There are also other cloud based tools available (like Dropbox), but those tools do not offer users to provide a message with changes they made to the code. Dropbox does keep a list of older files with timestamps.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here    
    
